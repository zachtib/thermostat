#!/usr/bin/env python

import ConfigParser
import datetime
import gdata
import gdata.calendar
import gdata.calendar.service
import time

class ThermoEvent:
        def __init__(self, name, value, start, end):
                self.name = name
                self.value = value
                self.start = start
                self.end = end

def datetime_to_336(dt):
        r = 0
        r += 48 * dt.weekday()
        r += 2 * dt.hour
        if dt.minute >= 30:
                r += 1
        return r

def parse_command(string):
        (cmd, val) = string.split()

if __name__ == '__main__':
        config = ConfigParser.ConfigParser()
        config.read('thermostat.conf')

        calendar = config.get('Calendar', 'calendar')

        calendar_service = gdata.calendar.service.CalendarService()

        now = datetime.datetime.today()
        week = datetime.timedelta(weeks=1)

        start_date = now.strftime('%Y-%m-%d')
        end_date = (now + week).strftime('%Y-%m-%d')

        query = gdata.calendar.service.CalendarEventQuery(calendar,
                                                        'public', 'full')

        query.start_min = start_date
        query.start_max = end_date

        feed = calendar_service.CalendarQuery(query)

        print feed.title.text, 'from %s to %s' % (start_date, end_date)

        events = []

        utc_off = datetime.timedelta(seconds=time.timezone)

        for event in feed.entry:
                title = event.title.text
                content = event.content.text
                for when in event.when:
                        start = datetime.datetime.strptime(when.start_time,
                                        '%Y-%m-%dT%H:%M:%S.000Z') - utc_off
                        end = datetime.datetime.strptime(when.end_time,
                                        '%Y-%m-%dT%H:%M:%S.000Z') - utc_off
                        events.append(ThermoEvent(title, content, start, end))
        
        event_bytes = [0] * 336

        for i, e in enumerate(sorted(events, key=lambda event: event.start)):
                print '%s: %s from %s to %s' % \
                        (i, e.name, e.start, e.end)
                try:
                        (name, value) = e.name.split()
                        print name, value
                        value = int(value)
                        if name == 'Heat':
                                b = 128 + int(value)
                        elif name == 'Air':
                                b = int(value)
                        elif name == 'Fan':
                                b = 255 
                        else:
                                b = 0
                except TypeError:
                        b = 0
                except ValueError:
                        b = 0

                start = datetime_to_336(e.start)
                end = datetime_to_336(e.end)
                for t in xrange(start, end):
                        event_bytes[t] = b
        print event_bytes
